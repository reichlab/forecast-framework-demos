size = 2,
data = preds_df) +
geom_line(mapping = aes(x = date_sick, y = cases),
size=0.7,
data = data_X)+
xlab("") + ylab("Number of Cases") +
coord_cartesian(ylim = c(0, 1000))
require(ForecastFramework)
require(R6)
require(forecast)
require(sarimaTD)
require(dplyr)
require(ggplot2)
source('models/ContestModel.R')
source('models/SARIMATDModel.R')
nsim <- 1000
sarima_model <- SARIMATDmodel$new(period = 26, nsim=nsim)
#sarima_model$undebug("fit")
dat <- read.csv('data/province-biweek-counts-training.csv')
dat$date_sick <- strptime(dat$date_sick,"%m/%d/%Y")
dat$date_sick <- as.Date(dat$date_sick)
inc <- IncidenceMatrix$new(1+reshape2::acast(dat,province~date_sick,value.var='cases'))
prov_nums <- 1
nmodels <- length(prov_nums)
sarima_model$fit(inc$subset(rows = prov_nums, mutate = FALSE))
steps <- 26
forecast_X <- sarima_model$forecast(steps = steps)
preds_df <- data.frame(as.table(t(forecast_X$data$mat)))
data_X <- read.csv('data/province-biweek-counts-testing.csv')
data_X$date_sick <- strptime(data_X$date_sick,"%m/%d/%Y")
data_X$date_sick <- as.Date(data_X$date_sick)
preds_dates <- data_X %>%
filter(year == 2013)
preds_df <- preds_df %>%
mutate(
pred_total_cases = as.vector(forecast_X$median()$mat),
pred_95_lb = as.vector(forecast_X$quantile(0.025)$mat),
pred_95_ub = as.vector(forecast_X$quantile(0.975)$mat),
pred_80_lb = as.vector(forecast_X$quantile(0.05)$mat),
pred_80_ub = as.vector(forecast_X$quantile(0.95)$mat),
pred_50_lb = as.vector(forecast_X$quantile(0.25)$mat),
pred_50_ub = as.vector(forecast_X$quantile(0.75)$mat)
)
preds_df[["date_sick"]] <-as.Date(preds_dates$date_sick, format = "%d-%m-%Y")
ggplot() +
geom_ribbon(
mapping = aes(x = date_sick, ymin = pred_95_lb, ymax = pred_95_ub),
fill = "cornflowerblue",
alpha = 0.2,
data = preds_df) +
geom_ribbon(
mapping = aes(x = date_sick, ymin = pred_80_lb, ymax = pred_80_ub),
fill = "cornflowerblue",
alpha = 0.2,
data = preds_df) +
geom_ribbon(
mapping = aes(x = date_sick, ymin = pred_50_lb, ymax = pred_50_ub),
alpha = 0.2,
data = preds_df) +
geom_line(
mapping = aes(x = date_sick, y = pred_total_cases),
color = "royalblue",
size = 2,
data = preds_df) +
geom_line(mapping = aes(x = date_sick, y = cases),
size=0.7,
data = data_X) +
xlab("") + ylab("Number of Cases") +
coord_cartesian(ylim = c(0, 1000))
# Import all Libraries
require(ForecastFramework)
require(R6)
require(forecast)
require(sarimaTD)
require(dplyr)
require(ggplot2)
# Source R6 Files
source('models/ContestModel.R')
source('models/SARIMATDModel.R')
###########################
# ~~~~~~ Model Fit ~~~~~~
###########################
nsim <- 1000 # Number of SARIMA simulations
sarimaTD_model <- SARIMATDmodel$new(period = 26, nsim=nsim)
# training data for province 10, years 2006 - 2012
dat <- read.csv('data/province-biweek-counts-training.csv')
dat$date_sick <- strptime(dat$date_sick,"%m/%d/%Y")
dat$date_sick <- as.Date(dat$date_sick)
inc <- IncidenceMatrix$new(1+reshape2::acast(dat,province~date_sick,value.var='cases'))
prov_nums <- 1
nmodels <- length(prov_nums)
sarimaTD_model$fit(inc$subset(rows = prov_nums, mutate = FALSE))
steps <- 26
##########################
# ~~~~ Model Forecast ~~~~
###########################
forecast_X <- sarimaTD_model$forecast(steps = steps)
preds_df <- data.frame(as.table(t(forecast_X$data$mat)))
data_X <- read.csv('data/province-biweek-counts-testing.csv')
data_X$date_sick <- strptime(data_X$date_sick,"%m/%d/%Y")
data_X$date_sick <- as.Date(data_X$date_sick)
preds_dates <- data_X %>%
filter(year == 2013)
preds_df <- preds_df %>%
mutate(
pred_total_cases = as.vector(forecast_X$median()$mat),
pred_95_lb = as.vector(forecast_X$quantile(0.025)$mat),
pred_95_ub = as.vector(forecast_X$quantile(0.975)$mat),
pred_80_lb = as.vector(forecast_X$quantile(0.05)$mat),
pred_80_ub = as.vector(forecast_X$quantile(0.95)$mat),
pred_50_lb = as.vector(forecast_X$quantile(0.25)$mat),
pred_50_ub = as.vector(forecast_X$quantile(0.75)$mat)
)
preds_df[["date_sick"]] <-as.Date(preds_dates$date_sick, format = "%d-%m-%Y")
ggplot() +
geom_ribbon(
mapping = aes(x = date_sick, ymin = pred_95_lb, ymax = pred_95_ub),
fill = "cornflowerblue",
alpha = 0.2,
data = preds_df) +
geom_ribbon(
mapping = aes(x = date_sick, ymin = pred_80_lb, ymax = pred_80_ub),
fill = "cornflowerblue",
alpha = 0.2,
data = preds_df) +
geom_ribbon(
mapping = aes(x = date_sick, ymin = pred_50_lb, ymax = pred_50_ub),
alpha = 0.2,
data = preds_df) +
geom_line(
mapping = aes(x = date_sick, y = pred_total_cases),
color = "royalblue",
size = 2,
data = preds_df) +
geom_line(mapping = aes(x = date_sick, y = cases),
size=0.7,
data = data_X) +
xlab("") + ylab("Number of Cases") +
coord_cartesian(ylim = c(0, 1000))
knitr::opts_chunk$set(echo = TRUE)
```{r cars, include=FALSE}
# Import all Libraries
require(ForecastFramework)
require(R6)
require(forecast)
require(dplyr)
require(ggplot2)
# Source R6 Files
source('models/ContestModel.R')
source('models/SARIMAModel.R')
# Import all Libraries
require(ForecastFramework)
require(R6)
require(forecast)
require(dplyr)
require(ggplot2)
# Source R6 Files
source('models/ContestModel.R')
source('models/SARIMATDModel.R')
###########################
# ~~~~~~ Model Fit ~~~~~~
###########################
nsim <- 1000 # Number of SARIMA simulations
sarima_model <- SARIMATDModel$new(period = 26, nsim=nsim)
# training data for province 10, years 2006 - 2012
dat <- read.csv('data/province-biweek-counts-training.csv')
dat$date_sick <- strptime(dat$date_sick,"%m/%d/%Y") # convert to date values
dat$date_sick <- as.Date(dat$date_sick)
inc <- IncidenceMatrix$new(1+reshape2::acast(dat,province~date_sick,value.var='cases'))
prov_nums <- 1
nmodels <- length(prov_nums)
sarima_model$fit(inc$subset(rows = prov_nums, mutate = FALSE))
##########################
# ~~~~ Model Forecast ~~~~
###########################
steps <- 26 # forecast ahead 26 biweeks
forecast_X <- sarima_model$forecast(steps = steps)
# add date_sick to forecast_X$data$mat by first
# converting predictions to a dataframe and using dplyr
preds_df <- data.frame(as.table(t(forecast_X$data$mat)))
# import testing dataset which has 2013 data
data_X <- read.csv('data/province-biweek-counts-testing.csv')
data_X$date_sick <- strptime(data_X$date_sick,"%m/%d/%Y") # convert to date values
data_X$date_sick <- as.Date(data_X$date_sick)
preds_dates <- data_X %>%
filter(year == 2013)
# add prediction columns to original forecast
preds_df <- preds_df %>%
mutate(
pred_total_cases = as.vector(forecast_X$median()$mat),
pred_95_lb = as.vector(forecast_X$quantile(0.025)$mat),
pred_95_ub = as.vector(forecast_X$quantile(0.975)$mat),
pred_80_lb = as.vector(forecast_X$quantile(0.05)$mat),
pred_80_ub = as.vector(forecast_X$quantile(0.95)$mat),
pred_50_lb = as.vector(forecast_X$quantile(0.25)$mat),
pred_50_ub = as.vector(forecast_X$quantile(0.75)$mat)
)
# add prediction dates to original forecast
preds_df[["date_sick"]] <-as.Date(preds_dates$date_sick, format = "%d-%m-%Y")
##########################
# ~~~~ Model Plot ~~~~
###########################
ggplot() +
geom_ribbon(
mapping = aes(x = date_sick, ymin = pred_95_lb, ymax = pred_95_ub),
fill = "cornflowerblue",
alpha = 0.2,
data = preds_df) +
geom_ribbon(
mapping = aes(x = date_sick, ymin = pred_80_lb, ymax = pred_80_ub),
fill = "cornflowerblue",
alpha = 0.2,
data = preds_df) +
geom_ribbon(
mapping = aes(x = date_sick, ymin = pred_50_lb, ymax = pred_50_ub),
alpha = 0.2,
data = preds_df) +
geom_line(
mapping = aes(x = date_sick, y = pred_total_cases),
color = "royalblue",
size = 2,
data = preds_df) +
geom_line(mapping = aes(x = date_sick, y = cases),
size=0.7,
data = data_X) +
xlab("") + ylab("Number of Cases") +
coord_cartesian(ylim = c(0, 1000))
# Import all Libraries
require(ForecastFramework)
require(R6)
require(forecast)
require(dplyr)
require(ggplot2)
# Source R6 Files
source('models/ContestModel.R')
source('models/SARIMAModel.R')
###########################
# ~~~~~~ Model Fit ~~~~~~
###########################
nsim <- 1000 # Number of SARIMA simulations
sarima_model <- SARIMAModel$new(period = 26, nsim=nsim)
# training data for province 10, years 2006 - 2012
dat <- read.csv('data/province-biweek-counts-training.csv')
dat$date_sick <- strptime(dat$date_sick,"%m/%d/%Y") # convert to date values
dat$date_sick <- as.Date(dat$date_sick)
inc <- IncidenceMatrix$new(1+reshape2::acast(dat,province~date_sick,value.var='cases'))
prov_nums <- 1
nmodels <- length(prov_nums)
sarima_model$fit(inc$subset(rows = prov_nums, mutate = FALSE))
##########################
# ~~~~ Model Forecast ~~~~
###########################
steps <- 26 # forecast ahead 26 biweeks
forecast_X <- sarima_model$forecast(steps = steps)
# add date_sick to forecast_X$data$mat by first
# converting predictions to a dataframe and using dplyr
preds_df <- data.frame(as.table(t(forecast_X$data$mat)))
# import testing dataset which has 2013 data
data_X <- read.csv('data/province-biweek-counts-testing.csv')
data_X$date_sick <- strptime(data_X$date_sick,"%m/%d/%Y") # convert to date values
data_X$date_sick <- as.Date(data_X$date_sick)
preds_dates <- data_X %>%
filter(year == 2013)
# add prediction columns to original forecast
preds_df <- preds_df %>%
mutate(
pred_total_cases = as.vector(forecast_X$median()$mat),
pred_95_lb = as.vector(forecast_X$quantile(0.025)$mat),
pred_95_ub = as.vector(forecast_X$quantile(0.975)$mat),
pred_80_lb = as.vector(forecast_X$quantile(0.05)$mat),
pred_80_ub = as.vector(forecast_X$quantile(0.95)$mat),
pred_50_lb = as.vector(forecast_X$quantile(0.25)$mat),
pred_50_ub = as.vector(forecast_X$quantile(0.75)$mat)
)
# add prediction dates to original forecast
preds_df[["date_sick"]] <-as.Date(preds_dates$date_sick, format = "%d-%m-%Y")
##########################
# ~~~~ Model Plot ~~~~
###########################
ggplot() +
geom_ribbon(
mapping = aes(x = date_sick, ymin = pred_95_lb, ymax = pred_95_ub),
fill = "cornflowerblue",
alpha = 0.2,
data = preds_df) +
geom_ribbon(
mapping = aes(x = date_sick, ymin = pred_80_lb, ymax = pred_80_ub),
fill = "cornflowerblue",
alpha = 0.2,
data = preds_df) +
geom_ribbon(
mapping = aes(x = date_sick, ymin = pred_50_lb, ymax = pred_50_ub),
alpha = 0.2,
data = preds_df) +
geom_line(
mapping = aes(x = date_sick, y = pred_total_cases),
color = "royalblue",
size = 2,
data = preds_df) +
geom_line(mapping = aes(x = date_sick, y = cases),
size=0.7,
data = data_X) +
xlab("") + ylab("Number of Cases") +
coord_cartesian(ylim = c(0, 1000))
# define how many provinces to model
# this demo only has data for one province: Province 10
prov_nums <- 1
nmodels <- length(prov_nums)
sarima_model$fit(inc$subset(rows = prov_nums, mutate = FALSE))
# Import all Libraries
require(ForecastFramework)
require(R6)
require(forecast)
require(dplyr)
require(ggplot2)
# Source R6 Files
source('models/ContestModel.R')
source('models/SARIMAModel.R')
###########################
# ~~~~~~ Model Fit ~~~~~~
###########################
nsim <- 1000 # Number of SARIMA simulations
sarima_model <- SARIMAModel$new(period = 26, nsim=nsim)
# training data for province 10, years 2006 - 2012
dat <- read.csv('data/province-biweek-counts-training.csv')
dat$date_sick <- as.Date(strptime(dat$date_sick,"%m/%d/%Y")) # convert to date values
inc <- IncidenceMatrix$new(1+reshape2::acast(dat,province~date_sick,value.var='cases'))
# define how many provinces to model
# this demo only has data for one province: Province 10
prov_nums <- 1
nmodels <- length(prov_nums)
sarima_model$fit(inc$subset(rows = prov_nums, mutate = FALSE))
##########################
# ~~~~ Model Forecast ~~~~
###########################
steps <- 26 # forecast ahead 26 biweeks
forecast_X <- sarima_model$forecast(steps = steps)
# add date_sick to forecast_X$data$mat by first
# converting predictions to a dataframe and using dplyr
preds_df <- data.frame(as.table(t(forecast_X$data$mat)))
# import testing dataset which has 2013 data
data_X <- read.csv('data/province-biweek-counts-testing.csv')
data_X$date_sick <- strptime(data_X$date_sick,"%m/%d/%Y") # convert to date values
data_X$date_sick <- as.Date(data_X$date_sick)
preds_dates <- data_X %>%
filter(year == 2013)
# add prediction columns to original forecast
preds_df <- preds_df %>%
mutate(
pred_total_cases = as.vector(forecast_X$median()$mat),
pred_95_lb = as.vector(forecast_X$quantile(0.025)$mat),
pred_95_ub = as.vector(forecast_X$quantile(0.975)$mat),
pred_80_lb = as.vector(forecast_X$quantile(0.05)$mat),
pred_80_ub = as.vector(forecast_X$quantile(0.95)$mat),
pred_50_lb = as.vector(forecast_X$quantile(0.25)$mat),
pred_50_ub = as.vector(forecast_X$quantile(0.75)$mat)
)
# add prediction dates to original forecast
preds_df[["date_sick"]] <-as.Date(preds_dates$date_sick, format = "%d-%m-%Y")
##########################
# ~~~~ Model Plot ~~~~
###########################
ggplot() +
geom_ribbon(
mapping = aes(x = date_sick, ymin = pred_95_lb, ymax = pred_95_ub),
fill = "cornflowerblue",
alpha = 0.2,
data = preds_df) +
geom_ribbon(
mapping = aes(x = date_sick, ymin = pred_80_lb, ymax = pred_80_ub),
fill = "cornflowerblue",
alpha = 0.2,
data = preds_df) +
geom_ribbon(
mapping = aes(x = date_sick, ymin = pred_50_lb, ymax = pred_50_ub),
alpha = 0.2,
data = preds_df) +
geom_line(
mapping = aes(x = date_sick, y = pred_total_cases),
color = "royalblue",
size = 2,
data = preds_df) +
geom_line(mapping = aes(x = date_sick, y = cases),
size=0.7,
data = data_X) +
xlab("") + ylab("Number of Cases") +
coord_cartesian(ylim = c(0, 1000))
---
title: "SARIMA Demo"
author: "Katie House"
date: "June 20, 2018"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
This demonstration investigate the usage of models with ForecastFramework. For more information on the SARIMA Model itself, check out: <https://github.com/reichlab/thai-dengue-district-challenge/blob/master/doc/ff-intro.Rmd>.
### Fitting the ForecastFramework SARIMA Model
##### 1. Import packages
First you must import all the required libraries. Note that ForecastFramework doesn't requre `dplyr` or `ggplot2`, but they will be used to make a figure at the end of the demo.
```{r, warning=FALSE, message=FALSE}
# Import all Libraries
require(ForecastFramework)
require(R6)
require(forecast)
require(dplyr)
require(ggplot2)
# Source R6 Files
source('models/ContestModel.R')
source('models/SARIMAModel.R')
```
Now it is time to fit your SARIMA Model! ForecastFramework makes this easy.
##### 2. Create new sarima_model Class
In this SARIMA model, simulation is used with `::forecast auto.arima()`. So we must define the number of simulations to use, `nsim`. We also need to define the **seasonal periodicity of our data**, or the `period` parameter. For Dengue forecasting, we know the periodicity is 26, because the data is biweekly. once we define these parameters, they can be passed into the `SARIMAModel()` class generator to create a new `sarima_model` class.
```{r, warning=FALSE, message=FALSE}
nsim <- 1000 # Number of SARIMA simulations
sarima_model <- SARIMAModel$new(period = 26, nsim = nsim)
```
##### 3. Import Dengue Data
To import data from a local csv, use the `read.csv()` command. In this example, the `date_sick` field is imported as a wrong datatype, so it must be converted to a date value with a couple of transformations. Then, the data is stored as an `IncidenceMatrix()`. An incidence matrix represents spatial time-series data in a matrix with one row per location and one column per time. To do this, another series of transformations are made. IncidenceMatrix is the preferred input for ForecastFramework Models.
```{r, warning=FALSE, message=FALSE}
# training data for province 10, years 2006 - 2012
dat <- read.csv('data/province-biweek-counts-training.csv')
dat$date_sick <- as.Date(strptime(dat$date_sick,"%m/%d/%Y")) # convert to date values
inc <- IncidenceMatrix$new(1+reshape2::acast(dat,province~date_sick,value.var='cases'))
print(inc$mat[,0:10])
```
##### 3. Fit the Model
Typically, all the provinces in Thailand would be fit separately and have different forecasts. For the scope of this demo, we are only fitting and forecasting **Province 10**. The SARIMAModel method requires the user to specify which province to model, in this case, we are modeling the first (and only) province in the dataset.
```{r, warning=FALSE, message=FALSE}
# define how many provinces to model
# this demo only has data for one province: Province 10
prov_nums <- 1
nmodels <- length(prov_nums)
sarima_model$fit(inc$subset(rows = prov_nums, mutate = FALSE))
```
### Forecasting with the ForecastFramework SARIMA Model
<br>
##### 4. Define the Forecast Model
Before forecasting, you must specify how many periods ahead you would like to forecast. This is defined by the `steps` parameter. Then, you forecast with the `sarima_model$forecast()` method. This model will forecast one year into the future (26 biweeks).
```{r, warning=FALSE, message=FALSE}
# define how many provinces to model
# this demo only has data for one province: Province 10
steps <- 26 # forecast ahead 26 biweeks
forecast_X <- sarima_model$forecast(steps = steps)
```
##### 5. Format the Forecast Output
Your `$forecast()` method outputs a new object with a variety of methods. For example, to view the output in matrix form execute the following command:
```{r, warning=FALSE}
forecast_X$data$mat
```
Lets convert the forecast matrix to a data frame in R for easy manipulation:
```{r, warning=FALSE, message=FALSE}
# converting predictions to a dataframe to use dplyr
preds_df <- data.frame(as.table(t(forecast_X$data$mat)))
```
One limitation to the `forecast_X$data$mat` method is that it does not include the `date_sick` in its output, because the model was trained on a subset of the data. One way to map the forecast to its predicted dates is to create a new data frame with the data from the missing year. Then, we will combine the output in `forecast_X$data` with the correct biweek dates.
```{r, warning=FALSE, message=FALSE}
# converting predictions to a dataframe to use dplyr
# import testing dataset which has 2013 data
data_X <- read.csv('data/province-biweek-counts-testing.csv')
data_X$date_sick <- strptime(data_X$date_sick,"%m/%d/%Y") # convert to date values
data_X$date_sick <- as.Date(data_X$date_sick)
preds_dates <- data_X %>%
filter(year == 2013)
# add prediction dates to original forecast
preds_df[["date_sick"]] <-as.Date(preds_dates$date_sick, format = "%d-%m-%Y")
```
Now, we can add the forecast to the `preds_df`
```{r, warning=FALSE, message=FALSE}
preds_df <- preds_df %>%
mutate(
pred_total_cases = as.vector(forecast_X$median()$mat),
pred_95_lb = as.vector(forecast_X$quantile(0.025)$mat),
pred_95_ub = as.vector(forecast_X$quantile(0.975)$mat),
pred_80_lb = as.vector(forecast_X$quantile(0.05)$mat),
pred_80_ub = as.vector(forecast_X$quantile(0.95)$mat),
pred_50_lb = as.vector(forecast_X$quantile(0.25)$mat),
pred_50_ub = as.vector(forecast_X$quantile(0.75)$mat)
)
print(preds_df)
```
## Plotting the Output
##### 6. Plot the Forecast Output
Finally, you are able to plot your SARIMA Forecast! Lets use `ggplot2` to create a cool plot.
```{r, warning=FALSE, message=FALSE}
ggplot() +
geom_ribbon(
mapping = aes(x = date_sick, ymin = pred_95_lb, ymax = pred_95_ub),
fill = "cornflowerblue",
alpha = 0.2,
data = preds_df) +
geom_ribbon(
mapping = aes(x = date_sick, ymin = pred_80_lb, ymax = pred_80_ub),
fill = "cornflowerblue",
alpha = 0.2,
data = preds_df) +
geom_ribbon(
mapping = aes(x = date_sick, ymin = pred_50_lb, ymax = pred_50_ub),
alpha = 0.2,
data = preds_df) +
geom_line(
mapping = aes(x = date_sick, y = pred_total_cases),
color = "royalblue",
size = 2,
data = preds_df) +
geom_line(mapping = aes(x = date_sick, y = cases),
size=0.7,
data = data_X) +
xlab("") + ylab("Number of Cases") +
coord_cartesian(ylim = c(0, 1000))
```

base_name <- basename(input_file_name)
## Time when the file was received
timezero <- str_sub(str_extract(base_name, "[0-9]{8}\\.rds$"), end=-5)
}
input_file_name <- "C://Users/house/Documents/GitHub/Reich_Lab/20180108-r6object-20180107.rds"
input_object <- read_input(input_file_name)
province_data <- read_province_data("C://Users/house/Documents/GitHub/Reich_Lab/dengue-data/misc/thai_prov_data.csv")
timezero_data <- read.csv("C://Users/house/Documents/GitHub/Reich_Lab/dengue-data/misc/timezero_data.csv")
output_file <- transform_input(input_object, province_data)
output_file <- output_file %>% filter(! (type=="Bin" & value == 0) )
# upload to bigstream
#url<- "https://api.tanrabad.org/bs1.2"
#token <- "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2byI6InRyYi5pbXBldHVzIiwiYWNsIjpbeyJyZXNvdXJjZSI6InRyYi5pbXBldHVzLioiLCJzZXJ2aWNlIjoic3RvcmFnZSIsImFjY2VwdCI6dHJ1ZX0seyJyZXNvdXJjZSI6InRyYi5jYXNlY291bnQuKiIsInNlcnZpY2UiOiJzdG9yYWdlIiwibW9kZSI6IisobHxyKSIsImFjY2VwdCI6dHJ1ZX0seyJyZXNvdXJjZSI6InRyYi5sYXJ2YXN1cnZleS4qIiwic2VydmljZSI6InN0b3JhZ2UiLCJtb2RlIjoiKyhsfHIpIiwiYWNjZXB0Ijp0cnVlfV0sImlhdCI6MTUyOTYzOTcxNn0.zCdXvbBKGpekm9w-EdWzZPvSckpqLQ977jfO8F2bCzM"
#bs.connect(url,token)
#get_timezero <- get_timezero_from_basename("C://Users/house/Documents/GitHub/Reich_Lab/20180616-r6object-20180612.rds")
#bigstream_file_name <- paste0("trb.impetus.dataframe.", get_timezero)
#bigstream_output <- output_file %>% filter(type == "Point")
#storage.save(bigstream_file_name,bigstream_output)
#ack <- list(storage_name=bigstream_file_name, timezero=get_timezero)
#storage.put("trb.impetus.newdata", ack)
output_file_name <- get_output_file_name(input_file_name)
write_output(output_file, output_file_name)
#!/usr/bin/env Rscript
"Export spamd files to CDC format csvs. Write the output in the same directory
as the input
Usage:
spamd-export.R <input-file> <province-csv> <timezero-csv>
spamd-export.R -h | --help
spamd-export.R -v | --version
Options:
-h --help       Show this screen.
-v --version    Show version.
Arguments:
<province-csv>  thai_prov_data.csv (from rda file in `dengueThailand/data`)
<timezero-csv>  timezero_data.csv (from Predict the District Challenge)
" -> doc
library(docopt)
library(dplyr)
library(stringr)
library(Rbigstream)
library(tanrabad)
library(jsonlite)
library(tidyjson)
opts <- docopt(doc)
breaks <- c(0, 1, seq(10, 2000, 10), 100000)
#' Read the r6object input
read_input <- function(input_file) {
## HACK: Disarm R to skip loading R6spatialpred which adds ~1500ms to readRDS
saved_libloc <- .libPaths()
assign(".lib.loc", "/non/existing/path", envir = environment(.libPaths))
df <- readRDS(input_file)
assign(".lib.loc", saved_libloc, envir = environment(.libPaths))
df
}
read_province_data <- function(province_file) {
read.csv(province_file) %>%
mutate(location = str_replace_all(tolower(Province), " ", "_")) %>%
rename(fips = FIPS) %>%
select(location, fips)
}
#' Make bins from the simulation dimension
#' Shape (simulations) -> (1 + bins)
binify_sims <- function(arr) {
counts <- hist(arr, breaks, right = FALSE, plot = FALSE)$counts
probabilities <- counts / sum(counts)
point <- median(arr)
c(point, probabilities)
}
transform_input <- function(object, province_data, n_targets = 5) {
simulations <- object$den_forecast$simulations[,1:n_targets,]
## NOTE: We use 1, 2, 3, 4, 5 as target names
targets <- 1:5
locations <- rownames(simulations)
n_values <- length(breaks) # length(breaks) - 1 + 1, for point
n_locations <- length(locations)
values <- rep(0.0, n_locations * n_targets * n_values)
pointer <- 1
for (i in 1:n_locations) {
for (j in 1:n_targets) {
values[pointer:(pointer + n_values - 1)] <- binify_sims(simulations[i,j,])
pointer <- pointer + n_values
}
}
target_type <- rep(c("Point", rep(c("Bin"), n_values - 1)))
unit <- rep("cases", n_locations * n_targets * n_values)
bin_starts <- rep(c(NA, head(breaks, - 1)), n_locations * n_targets)
bin_ends <- rep(c(NA, tail(breaks, - 1)), n_locations * n_targets)
data.frame(location = rep(locations, each = n_targets * n_values),
target = rep(rep(targets, each = n_values), n_locations),
type = target_type, unit = unit,
bin_start_incl = bin_starts, bin_end_notincl = bin_ends, value = values) %>%
mutate(location = tolower(location)) %>%
merge(province_data, by="location") %>%
select(fips, everything(), -location) %>%
rename(location = fips) %>%
filter(location != "TH81") %>%
mutate(target = str_c(target, "_biweek_ahead"))
}
write_output <- function(data, output_file) {
write.csv(data, file = output_file, row.names = FALSE)
cat(paste0("Output written at ", output_file, "\n"))
}
get_previous_timezero <- function(base_name) {
## Find the biweek the current timzero is in
timezero <- str_sub(str_extract(base_name, "[0-9]{8}\\.rds$"), end=-5)
timezero <- as.Date(timezero,"%Y%m%d")
timezero_day <- as.numeric(substr(timezero,9,12))
timezero_month <- as.numeric(substr(timezero,6,7))
timezero_year <- as.numeric(substr(timezero,0,4))
current_biweek <- timezero_data %>%
filter(reg_yr_month == timezero_month
& reg_yr_day <= timezero_day)
## Find the previous biweek and map it to the new timezero
previous_biweek <- tail(current_biweek,1)$biweek - 2
if (previous_biweek<= 0) {
previous_biweek <- 26 + previous_biweek
timezero_year <- timezero_year - 1
}
first_timezero_df <- timezero_data %>% filter(biweek == previous_biweek)
first_timezero <- paste0(first_timezero_df$reg_yr_month,"-",
first_timezero_df$reg_yr_day,"-",
timezero_year)
first_timezero <- format(as.Date(first_timezero,"%m-%d-%Y"), "%Y%m%d")
}
get_output_file_name <- function(input_file_name) {
base_name <- basename(input_file_name)
model_name <- "gam_lag1_tops3"
## Calculate the first timezero
first_timezero <- get_previous_timezero(base_name)
## Date when model was run
data_version_date <- str_extract(base_name, "^[0-9]{8}")
out_name <- paste0(first_timezero, "-", model_name, "-", data_version_date, ".cdc.csv")
file.path(dirname(input_file_name), out_name)
}
input_object <- read_input(opts[["<input-file>"]])
province_data <- read_province_data(opts[["<province-csv>"]])
timezero_data <- read.csv(opts[["<timezero-csv>"]])
output_file <- transform_input(input_object, province_data)
output_file <- output_file %>% filter(! (type=="Bin" & value == 0) )
# Connect to Bigstream
# url<- "https://api.tanrabad.org/bs1.2"
# token <- "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2byI6InRyYi5pbXBldHVzIiwiYWNsIjpbeyJyZXNvdXJjZSI6InRyYi5pbXBldHVzLioiLCJzZXJ2aWNlIjoic3RvcmFnZSIsImFjY2VwdCI6dHJ1ZX0seyJyZXNvdXJjZSI6InRyYi5jYXNlY291bnQuKiIsInNlcnZpY2UiOiJzdG9yYWdlIiwibW9kZSI6IisobHxyKSIsImFjY2VwdCI6dHJ1ZX0seyJyZXNvdXJjZSI6InRyYi5sYXJ2YXN1cnZleS4qIiwic2VydmljZSI6InN0b3JhZ2UiLCJtb2RlIjoiKyhsfHIpIiwiYWNjZXB0Ijp0cnVlfV0sImlhdCI6MTUyOTYzOTcxNn0.zCdXvbBKGpekm9w-EdWzZPvSckpqLQ977jfO8F2bCzM"
# bs.connect(url,token)
# Save forecast dataframe in Bigstream
# get_timezero <- get_previous_timezero(basename(opts[["<input-file>"]]))
# bigstream_file_name <- paste0("trb.impetus.dataframe.", get_timezero)
# bigstream_output <- output_file %>% filter(type == "Point")
# storage.save(bigstream_file_name,bigstream_output)
# Notify NECTEC New bigstream data is availible
# ack <- list(storage_name=bigstream_file_name, timezero=get_timezero)
# storage.put("trb.impetus.newdata", ack)
# Output for SpamD
write_output(output_file, get_output_file_name(opts[["<input-file>"]]))
#!/usr/bin/env Rscript
"Export spamd files to CDC format csvs. Write the output in the same directory
as the input
Usage:
spamd-export.R <input-file> <province-csv>
spamd-export.R -h | --help
spamd-export.R -v | --version
Options:
-h --help       Show this screen.
-v --version    Show version.
Arguments:
<province-csv>  thai_prov_data.csv (from rda file in `dengueThailand/data`)
" -> doc
library(docopt)
library(dplyr)
library(stringr)
library(Rbigstream)
library(tanrabad)
library(jsonlite)
library(tidyjson)
opts <- docopt(doc)
breaks <- c(0, 1, seq(10, 2000, 10), 100000)
#' Read the r6object input
read_input <- function(input_file) {
## HACK: Disarm R to skip loading R6spatialpred which adds ~1500ms to readRDS
saved_libloc <- .libPaths()
assign(".lib.loc", "/non/existing/path", envir = environment(.libPaths))
df <- readRDS(input_file)
assign(".lib.loc", saved_libloc, envir = environment(.libPaths))
df
}
read_province_data <- function(province_file) {
read.csv(province_file) %>%
mutate(location = str_replace_all(tolower(Province), " ", "_")) %>%
rename(fips = FIPS) %>%
select(location, fips)
}
#' Make bins from the simulation dimension
#' Shape (simulations) -> (1 + bins)
binify_sims <- function(arr) {
counts <- hist(arr, breaks, right = FALSE, plot = FALSE)$counts
probabilities <- counts / sum(counts)
point <- median(arr)
c(point, probabilities)
}
transform_input <- function(object, province_data, n_targets = 5) {
simulations <- object$den_forecast$simulations[,1:n_targets,]
## NOTE: We use 0, 1, 2, 3, 4, 5 as target names
targets <- 1:5
locations <- rownames(simulations)
n_values <- length(breaks) # length(breaks) - 1 + 1, for point
n_locations <- length(locations)
values <- rep(0.0, n_locations * n_targets * n_values)
pointer <- 1
for (i in 1:n_locations) {
for (j in 1:n_targets) {
values[pointer:(pointer + n_values - 1)] <- binify_sims(simulations[i,j,])
pointer <- pointer + n_values
}
}
target_type <- rep(c("Point", rep(c("Bin"), n_values - 1)))
unit <- rep("cases", n_locations * n_targets * n_values)
bin_starts <- rep(c(NA, head(breaks, - 1)), n_locations * n_targets)
bin_ends <- rep(c(NA, tail(breaks, - 1)), n_locations * n_targets)
data.frame(location = rep(locations, each = n_targets * n_values),
target = rep(rep(targets, each = n_values), n_locations),
type = target_type, unit = unit,
bin_start_incl = bin_starts, bin_end_notincl = bin_ends, value = values) %>%
mutate(location = tolower(location)) %>%
merge(province_data, by="location") %>%
select(fips, everything(), -location) %>%
rename(location = fips) %>%
filter(location != "TH81") %>%
mutate(target = str_c(target, "_biweek_ahead"))
}
write_output <- function(data, output_file) {
write.csv(data, file = output_file, row.names = FALSE)
cat(paste0("Output written at ", output_file, "\n"))
}
get_previous_timezero <- function(base_name) {
timezero <- str_sub(str_extract(base_name, "[0-9]{8}\\.rds$"), end=-5)
timezero <- as.Date(timezero,"%Y%m%d")
timezero_day <- as.numeric(substr(timezero,9,12))
timezero_month <- as.numeric(substr(timezero,6,7))
timezero_year <- as.numeric(substr(timezero,0,4))
current_biweek <- timezero_data %>%
filter(reg_yr_month == timezero_month
& reg_yr_day <= timezero_day)
previous_biweek <- tail(current_biweek,1)$biweek - 2
if (previous_biweek<= 0) {
previous_biweek <- 26 + previous_biweek
timezero_year <- timezero_year - 1
}
first_timezero_df <- timezero_data %>% filter(biweek == previous_biweek)
first_timezero <- paste0(first_timezero_df$reg_yr_month,"-",
first_timezero_df$reg_yr_day,"-",
timezero_year)
first_timezero <- format(as.Date(first_timezero,"%m-%d-%Y"), "%Y%m%d")
}
get_output_file_name <- function(input_file_name) {
base_name <- basename(input_file_name)
model_name <- "gam_lag1_tops3"
## Time when the file was received
first_timezero <- get_previous_timezero(base_name)
## Date when model was run
data_version_date <- str_extract(base_name, "^[0-9]{8}")
out_name <- paste0(first_timezero, "-", model_name, "-", data_version_date, ".cdc.csv")
file.path(dirname(input_file_name), out_name)
}
get_timezero_from_basename <- function(input_file_name) {
base_name <- basename(input_file_name)
## Time when the file was received
timezero <- str_sub(str_extract(base_name, "[0-9]{8}\\.rds$"), end=-5)
}
input_file_name <- "C://Users/house/Documents/GitHub/Reich_Lab/20180108-r6object-20180107.rds"
input_object <- read_input(input_file_name)
province_data <- read_province_data("C://Users/house/Documents/GitHub/Reich_Lab/dengue-data/misc/thai_prov_data.csv")
timezero_data <- read.csv("C://Users/house/Documents/GitHub/Reich_Lab/dengue-data/misc/timezero_data.csv")
output_file <- transform_input(input_object, province_data)
output_file <- output_file %>% filter(! (type=="Bin" & value == 0) )
# upload to bigstream
#url<- "https://api.tanrabad.org/bs1.2"
#token <- "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2byI6InRyYi5pbXBldHVzIiwiYWNsIjpbeyJyZXNvdXJjZSI6InRyYi5pbXBldHVzLioiLCJzZXJ2aWNlIjoic3RvcmFnZSIsImFjY2VwdCI6dHJ1ZX0seyJyZXNvdXJjZSI6InRyYi5jYXNlY291bnQuKiIsInNlcnZpY2UiOiJzdG9yYWdlIiwibW9kZSI6IisobHxyKSIsImFjY2VwdCI6dHJ1ZX0seyJyZXNvdXJjZSI6InRyYi5sYXJ2YXN1cnZleS4qIiwic2VydmljZSI6InN0b3JhZ2UiLCJtb2RlIjoiKyhsfHIpIiwiYWNjZXB0Ijp0cnVlfV0sImlhdCI6MTUyOTYzOTcxNn0.zCdXvbBKGpekm9w-EdWzZPvSckpqLQ977jfO8F2bCzM"
#bs.connect(url,token)
#get_timezero <- get_timezero_from_basename("C://Users/house/Documents/GitHub/Reich_Lab/20180616-r6object-20180612.rds")
#bigstream_file_name <- paste0("trb.impetus.dataframe.", get_timezero)
#bigstream_output <- output_file %>% filter(type == "Point")
#storage.save(bigstream_file_name,bigstream_output)
#ack <- list(storage_name=bigstream_file_name, timezero=get_timezero)
#storage.put("trb.impetus.newdata", ack)
output_file_name <- get_output_file_name(input_file_name)
write_output(output_file, output_file_name)
knitr::opts_chunk$set(echo = TRUE)
# Import all Libraries
setwd("..")
require(ForecastFramework)
require(R6)
require(forecast)
require(dplyr)
require(ggplot2)
# Source R6 Files
source('models/ContestModel.R')
setwd("..")
setwd("..")
getwd()
setwd("..")
getwd()
require(ForecastFramework)
require(R6)
require(forecast)
require(dplyr)
require(ggplot2)
# Source R6 Files
source('models/ContestModel.R')
```{r setup, include=FALSE}
setwd("..")
getwd()
require(ForecastFramework)
require(R6)
require(forecast)
require(dplyr)
require(ggplot2)
# Source R6 Files
source('/models/ContestModel.R')
setwd("..")
getwd()
# Import all Libraries
setwd("")
```{r, warning=FALSE, message=FALSE}
getwd()
require(ForecastFramework)
require(R6)
require(forecast)
require(dplyr)
require(ggplot2)
# Source R6 Files
source('/models/ContestModel.R')
# Import all Libraries
setwd("..")
getwd()
require(ForecastFramework)
require(R6)
require(forecast)
require(dplyr)
require(ggplot2)
# Source R6 Files
source('final/models/ContestModel.R')
source('final/models/SARIMAModel.R')
install.packages("DiagrammeR")
graph <-
open_graph(
system.file(
"extdata/example_graphs_dgr/repository.dgr",
package = "DiagrammeR"))
library(DiagrammeR)
# Load in a the small repository graph
graph <-
open_graph(
system.file(
"extdata/example_graphs_dgr/repository.dgr",
package = "DiagrammeR"))
library(DiagrammeR)
# Load in a the small repository graph
graph <-
open_graph(
system.file(
"extdata/example_graphs_dgr/repository.dgr",
package = "DiagrammeR"))
render_graph(graph, layout = "kk")
setwd("..")
setwd("..")
knitr::opts_chunk$set(echo = TRUE)
setwd("..")
getwd()
getwd()
setwd(getwd())
setwd(getwd())
getwd()
To install this package, either run:
```{r, eval=FALSE}
install.packages('ForecastFramework')
```
Or:
```{r,  eval=FALSE}
require(devtools)
devtools::install_github('HopkinsIDD/ForecastFramework')
```
install.packages('ForecastFramework')
```
knitr::opts_chunk$set(echo = TRUE)
setwd(getwd())
```{r eval=FALSE}
```{r setup, include=FALSE}
print('hello')
knitr::opts_chunk$set(echo = TRUE)
setwd(getwd())
```{r setup, include=FALSE}
unlink('GitHub/Reich_Lab/ForecastFramework Project/final/index_cache', recursive = TRUE)
```{r eval=FALSE}
devtools::install_github('HopkinsIDD/ForecastFramework')
print("Don't run me")
print("Don't run me")
print("Don't run me")
print("Don't run me")
print("Don't run me")
print("Don't run me")
print("Don't run me")
print(data_matrix)s
source('~/GitHub/Reich_Lab/ForecastFramework Project/forecast-framework-demos/vignettes/evaluate.R')
source('~/GitHub/Reich_Lab/ForecastFramework Project/forecast-framework-demos/vignettes/evaluate.R', echo=TRUE)
source('~/GitHub/Reich_Lab/ForecastFramework Project/forecast-framework-demos/vignettes/evaluate.R', echo=TRUE)
getwd()
setwd(getwd())
source('~/GitHub/Reich_Lab/ForecastFramework Project/forecast-framework-demos/vignettes/evaluate.R', echo=TRUE)
setwd(getwd())
print(setwd(getwd()))
source('../models/SARIMAModel.R')
source('~/GitHub/Reich_Lab/ForecastFramework Project/forecast-framework-demos/vignettes/evaluate.R', echo=TRUE)
print(setwd(getwd('..')))
print(setwd(getwd('..')))
print(setwd(getwd('')))
setwd("/C:/Users/house\Documents/GitHub/Reich_Lab/ForecastFramework Project/forecast-framework-demos/models")
setwd("/C:/Users/house/Documents/GitHub/Reich_Lab/ForecastFramework Project/forecast-framework-demos/models")
setwd("C://Users/house/Documents/GitHub/Reich_Lab/ForecastFramework Project/forecast-framework-demos/models")
print(data_matrix)
source('~/GitHub/Reich_Lab/ForecastFramework Project/forecast-framework-demos/vignettes/evaluate.R', echo=TRUE)
source('~/GitHub/Reich_Lab/ForecastFramework Project/forecast-framework-demos/vignettes/evaluate.R', echo=TRUE)
source('GamModel.R')
source('~/GitHub/Reich_Lab/ForecastFramework Project/forecast-framework-demos/vignettes/evaluate.R', echo=TRUE)
source('GamModel.R')
source('SARIMAModel.R')
source('~/GitHub/Reich_Lab/ForecastFramework Project/forecast-framework-demos/vignettes/evaluate.R', echo=TRUE)
source('~/GitHub/Reich_Lab/ForecastFramework Project/forecast-framework-demos/vignettes/evaluate.R', echo=TRUE)
source('~/GitHub/Reich_Lab/ForecastFramework Project/forecast-framework-demos/vignettes/evaluate.R', echo=TRUE)
gam_model <- GamModel.R$new(period = 26, nsim = nsim)
source('~/GitHub/Reich_Lab/ForecastFramework Project/forecast-framework-demos/vignettes/evaluate.R', echo=TRUE)
gam_model <- GamModel$new(period = 26, nsim = nsim)
gam_model <- GamModel$new()
gam_model
gam_model <- GamModel$new(numProvinces=1,nSims=nsim)
gam_model
gam_model$Public
gam_model
source('~/GitHub/Reich_Lab/ForecastFramework Project/forecast-framework-demos/vignettes/evaluate.R', echo=TRUE)
inc
inc$subset(rows = prov_nums, mutate = FALSE)
gam_model$fit(inc$subset(rows = prov_nums, mutate = FALSE$cellData))
gam_model$fit()
gam_model$fit(inc)
gam_model$fit(data=inc)
source('~/GitHub/Reich_Lab/ForecastFramework Project/forecast-framework-demos/vignettes/evaluate.R', echo=TRUE)
print(row)
print(row$cellData)
print(row$mat)
gam_model$fitRow_(row)
gam_model$fitRow_(row$mat)
gam_model$fitRow_(row)
gam_model$fitRow_(row$mat)
gam_model <- GamModel$new(numProvinces=1,nSims=nsim,predCols = c(1))
gam_model <- GamModel$new(numProvinces=1,nSims=nsim,predCols = c(1))
gam_model$fitRow_(row$mat)
library(R6)
library(ForecastFramework)
library(dplyr)
library(forecast)
setwd("C://Users/house/Documents/GitHub/Reich_Lab/ForecastFramework Project/forecast-framework-demos/models")
source('GamModel.R')
source('SARIMAModel.R')
source('ContestModel.R')
# Upload data
dat <- read.csv('../data/province-biweek-counts-training.csv')
dat$date_sick <- as.Date(strptime(dat$date_sick,"%m/%d/%Y")) # convert to date values
inc <- IncidenceMatrix$new(1+reshape2::acast(dat,province~date_sick,value.var='cases'))
# Create models
nsim <- 1000 # Number of SARIMA simulations
sarima_model <- SARIMAModel$new(period = 26, nsim = nsim)
gam_model <- GamModel$new(numProvinces=1,nSims=nsim,predCols = c(1))
# Fit Models
prov_nums <- 1
nmodels <- length(prov_nums)
row <- inc$subset(rows = prov_nums, mutate = FALSE)
#sarima_model$fit(row)
gam_model$fitRow_(row$mat)
library(R6)
library(ForecastFramework)
library(dplyr)
library(forecast)
setwd("C://Users/house/Documents/GitHub/Reich_Lab/ForecastFramework Project/forecast-framework-demos/models")
source('GamModel.R')
source('SARIMAModel.R')
source('ContestModel.R')
# Upload data
dat <- read.csv('../data/province-biweek-counts-training.csv')
dat$date_sick <- as.Date(strptime(dat$date_sick,"%m/%d/%Y")) # convert to date values
inc <- IncidenceMatrix$new(1+reshape2::acast(dat,province~date_sick,value.var='cases'))
# Create models
nsim <- 1000 # Number of SARIMA simulations
sarima_model <- SARIMAModel$new(period = 26, nsim = nsim)
gam_model <- GamModel$new(numProvinces=1,nSims=nsim,predCols = c(0))
# Fit Models
prov_nums <- 1
nmodels <- length(prov_nums)
row <- inc$subset(rows = prov_nums, mutate = FALSE)
#sarima_model$fit(row)
gam_model$fitRow_(row$mat)
gam_model$fitRow_(inc$mat)
gam_model$fitRow_(row$mat,1)
gam_model$fitRow_(row$mat,0)
gam_model$fitRow_(row$mat)
gam_model <- GamModel$new(numProvinces=0,nSims=nsim,predCols = c(0))
gam_model$fitRow_(row$mat,0)
gam_model$fitRow_(row$mat)
gam_model$fitRow_(row)
row <- inc$subset(rows = prov_nums, mutate = FALSE)
gam_model$fitRow_(row)
row <- inc$subset(rows = prov_nums, mutate = FALSE)
gam_model$fitRow_(row)
gam_model$fitRow_(row)
gam_model$fitRow_(row)
